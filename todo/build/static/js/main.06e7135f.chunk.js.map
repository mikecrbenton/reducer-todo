{"version":3,"sources":["actions/todoActions.js","components/TodoForm.js","components/Todo.js","components/TodoList.js","reducers/index.js","App.js","index.js"],"names":["todoId","type","payload","event","todoText","ListForm","props","useState","setTodoText","onSubmit","e","preventDefault","dispatch","actions","name","onChange","target","value","TodoForm","styled","form","Todo","TodoItem","className","todo","completed","onClick","id","task","div","ToDoList","list","toggleTask","clearCompleted","console","log","ListContainer","map","key","TodoList","initialState","taskReducer","state","action","newTask","Date","now","filter","item","App","useReducer","MainContainer","ReactDOM","render","document","getElementById"],"mappings":"wMAMe,EAEA,SAACA,GACV,MAAQ,CAAEC,KATW,cASQC,QAASF,IAH7B,EAKI,SAACG,GACd,MAAQ,CAACF,KAXe,kBAWQC,QAASC,IANhC,EAQH,SAACC,GACP,MAAQ,CAAEH,KAbQ,WAaQC,QAASE,I,+lBCwB1BC,MAjCf,SAAmBC,GAAS,IAAD,EAEOC,mBAAS,IAFhB,mBAElBH,EAFkB,KAERI,EAFQ,KAoBvB,OACE,kBAAC,EAAD,CAAUC,SAbQ,SAAAC,GACpBA,EAAEC,iBAMHL,EAAMM,SAAUC,EAAgBT,IAE/BI,EAAY,MAKR,2BACEP,KAAK,OACLa,KAAK,WACLC,SArBc,SAAAL,GACpBF,EAAYE,EAAEM,OAAOC,QAqBfA,MAAOb,IAET,4BAAQH,KAAK,UAAb,SAOFiB,EAAWC,IAAOC,KAAV,K,kKCnCd,IAceC,EAdF,SAACf,GAEZ,OACE,kBAACgB,EAAD,CAEEC,UAAS,cAASjB,EAAMkB,KAAKC,UAAY,aAAe,IAExDC,QAAS,SAAChB,GAAD,OAAOJ,EAAMM,SAAUC,EAAmBP,EAAMkB,KAAKG,OAE9D,2BAAIrB,EAAMkB,KAAKI,QAOfN,EAAWH,IAAOU,IAAV,K,wjBChBd,IAwBeC,EAxBE,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,KAAkBnB,GAA+B,EAA3CoB,WAA2C,EAA/BpB,UAA+B,EAArBqB,eAG9C,OADCC,QAAQC,IAAIJ,GAEX,kBAACK,EAAD,KACE,kBAAC,EAAD,KACKL,EAAKM,KAAK,SAAAb,GACZ,OAAO,kBAAC,EAAD,CACKA,KAAMA,EACNc,IAAKd,EAAKG,GAEVf,SAAUA,QAIzB,4BAEGc,QAAU,kBAAMd,EAAUC,OAF7B,qBAWA0B,EAAWpB,IAAOU,IAAV,KAMRO,EAAgBjB,IAAOU,IAAV,K,gBCvBNW,EAAe,CACzB,CACEZ,KAAM,0BACND,GAAI,EACJF,WAAW,GAEb,CACEG,KAAM,0BACND,GAAI,EACJF,WAAW,GAEb,CACGG,KAAM,oBACND,GAAI,EACJF,WAAW,GAEb,CACEG,KAAM,YACND,GAAI,EACJF,WAAW,GAEb,CACEG,KAAM,gBACND,GAAI,EACJF,WAAW,GAEb,CACEG,KAAM,mBACND,GAAI,EACJF,WAAW,IAsBJgB,EAAc,SAACC,EAAOC,GAKhC,OAAOA,EAAO1C,MAIX,IJzEkB,WI0Ef,IAAM2C,EAAU,CACbhB,KAAMe,EAAOzC,QACbyB,GAAIkB,KAAKC,MACTrB,WAAW,GAId,MAAM,GAAN,mBAAWiB,GAAX,CAAkBE,IAKrB,IJxFqB,cIiGlB,OARiBF,EAAML,KAAK,SAACT,GAE1B,OAAGe,EAAOzC,UAAY0B,EAAKD,GACjB,2BAAKC,GAAZ,IAAkBH,WAAYG,EAAKH,YAE5BG,KAMhB,IJnGwB,kBIoGrB,OAAOc,EAAMK,QAAQ,SAAAC,GAAI,OAAKA,EAAKvB,aAGtC,QAEG,OADAS,QAAQC,IAAI,SACLO,I,oSC5DDO,MApCf,WAAe,MAEaC,qBAAWT,EAAaD,GAFrC,mBAELT,EAFK,KAECnB,EAFD,KAiBX,OACE,kBAACuC,EAAD,KAEG,yBAAK5B,UAAU,UACb,0CACA,kBAACL,EAAD,CAAUN,SAAUA,KAGtB,kBAAC2B,EAAD,CACER,KAAMA,EAGNnB,SAAUA,MASfuC,EAAgBhC,IAAOU,IAAV,KC3CnBuB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.06e7135f.chunk.js","sourcesContent":["export const TOGGLE_TODO = \"TOGGLE_TODO\" \r\nexport const CLEAR_COMPLETED =\"CLEAR_COMPLETED\"\r\nexport const ADD_TODO = \"ADD_TODO\"\r\n\r\n// INSTEAD OF HAVING TO WRITE OUT THE DISPATCH EACH TIME IN THE COMPONENT\r\n// ACTION-CREATOR - RETURNS A FUNCTION\r\nexport default {\r\n\r\n   toggleTodo: (todoId) => {\r\n      return( { type: TOGGLE_TODO, payload: todoId } )\r\n   },\r\n   clearCompleted: (event) => {\r\n      return( {type: CLEAR_COMPLETED, payload: event } )\r\n   },\r\n   addTodo: (todoText) => {\r\n      return( { type: ADD_TODO, payload: todoText })\r\n   }\r\n}","import React, { useState } from \"react\";\r\nimport styled from 'styled-components';\r\nimport './Todo.css';\r\nimport actions from '../actions/todoActions'\r\n\r\n\r\nfunction ListForm( props ) {\r\n\r\n  const [todoText, setTodoText] = useState(\"\")\r\n \r\n  const changeHandler = e => {\r\n    setTodoText(e.target.value);\r\n    };\r\n\r\n  const submitHandler = e => {\r\n    e.preventDefault();\r\n   //  props.dispatch(\r\n   //     { \r\n   //        type:\"ADD_TODO\", \r\n   //        payload: todoText\r\n   //     });\r\n   props.dispatch( actions.addTodo(todoText) )\r\n    //clear form\r\n    setTodoText(\"\");\r\n  };\r\n   \r\n    return (\r\n      <TodoForm onSubmit={submitHandler}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"todoText\"\r\n          onChange={changeHandler} // setState\r\n          value={todoText} //controlled input - view State\r\n        />\r\n        <button type=\"submit\">Add</button>\r\n      </TodoForm>\r\n    );\r\n}\r\n\r\nexport default ListForm;\r\n\r\nconst TodoForm = styled.form`\r\nmargin-bottom: 1em;\r\ndisplay: flex;\r\njustify-content: center;\r\n\r\n   input{\r\n      background-color: #2d2d37;\r\n      border: none;\r\n      border-bottom: 2px solid #009B77;\r\n      color: whitesmoke;\r\n      font-family: lato; \r\n      font-size: 1rem;\r\n      font-weight: 900;\r\n      padding: .5em .3em;\r\n   }\r\n   button{\r\n      background-color: #009B77;\r\n      border: 1px solid #009B77;\r\n      margin-left: .5em;\r\n      color: whitesmoke;\r\n      padding: .5em 2em;\r\n      font-size: 1rem;\r\n      box-shadow: 0px 0px 20px #121212;\r\n   }\r\n`;","import React from 'react';\r\nimport './Todo.css'\r\nimport styled from 'styled-components';\r\nimport actions from '../actions/todoActions'\r\n\r\n//**FUNCTIONAL COMPONENT**\r\nconst Todo = (props) => {\r\n\r\n  return (\r\n    <TodoItem\r\n      //toggles the classname \r\n      className={`todo${props.todo.completed ? ' completed' : ''}`}\r\n      // onClick={(e) => props.toggleTask(props.todo.id)}\r\n      onClick={(e) => props.dispatch( actions.toggleTodo(props.todo.id) ) }\r\n    >\r\n      <p>{props.todo.task}</p>\r\n    </TodoItem>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n\r\nconst TodoItem = styled.div`\r\n   background-color: #009B77;\r\n   width: 45%;\r\n   padding: .2em .4em;\r\n   margin: .3em 0;\r\n`;","import React from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport styled from 'styled-components';\r\nimport actions from '../actions/todoActions'\r\n\r\n//**FUNCTIONAL COMPONENT**\r\nconst ToDoList = ({ list, toggleTask, dispatch, clearCompleted }) => {\r\n\r\n   console.log(list)\r\n  return (\r\n    <ListContainer> \r\n      <TodoList>\r\n         { list.map( todo => {\r\n         return <Todo \r\n                     todo={todo} \r\n                     key={todo.id} \r\n                     //toggleTask={toggleTask} \r\n                     dispatch={dispatch}\r\n                  />;\r\n         })}\r\n      </TodoList>\r\n      <button \r\n         //onClick={clearCompleted}>\r\n         onClick={ () => dispatch( actions.clearCompleted()) }>\r\n         Clear Completed\r\n      </button>\r\n    </ListContainer>\r\n  );\r\n};\r\n\r\nexport default ToDoList;\r\n\r\nconst TodoList = styled.div`\r\n   display: flex;\r\n   flex-wrap: wrap;\r\n   justify-content: space-evenly;\r\n`;\r\n\r\nconst ListContainer = styled.div`\r\n   display: flex;\r\n   flex-direction: column;\r\n   justify-content: center;\r\n\r\n   button{\r\n      background-color: #009B77;\r\n      border: 1px solid #009B77;\r\n      margin-left: .5em;\r\n      color: whitesmoke;\r\n      padding: .5em 2em;\r\n      font-size: 1rem;\r\n      margin: 1em auto;\r\n      width: 45%;\r\n      box-shadow: 0px 0px 20px #121212;\r\n   }\r\n`;","import { TOGGLE_TODO, CLEAR_COMPLETED, ADD_TODO } from \"../actions/todoActions\"\r\n\r\n// Need to add a reducer for \r\n// TOGGLE_COMPLETED\r\n// ADD_NEWTASK\r\n\r\n// 1st object STATE, 2nd object ACTION OBJECT\r\n// Reducer returns a new state object based on the action\r\n\r\n// Action : Object with 1) Type:   2) Payload : ( optional )\r\n//Actions are \"dispatched\" by dispatch functions\r\n\r\n// Export : initialstate, taskReducer\r\n\r\n// INITIAL STATE\r\nexport const initialState = [\r\n   {\r\n     task: 'Work Ahead on Classwork',\r\n     id: 1,\r\n     completed: false\r\n   },\r\n   {\r\n     task: 'Set Up Laptop For Class',\r\n     id: 2,\r\n     completed: false\r\n   },\r\n   {\r\n      task: 'Fill Tires w/ Air',\r\n      id: 3,\r\n      completed: false\r\n    },\r\n    {\r\n      task: 'Do Dishes',\r\n      id: 4,\r\n      completed: false\r\n    },\r\n    {\r\n      task: 'Search Closet',\r\n      id: 5,\r\n      completed: false\r\n    },\r\n    {\r\n      task: 'Put Away Clothes',\r\n      id: 6,\r\n      completed: false\r\n    },\r\n ];\r\n\r\n // ALL THE STATE CHANGES HAPPEN HERE\r\n\r\n/* \r\n   --useReducer() takes your initial state and your custom function\r\n     and passes them to state.  dispatch becomes like your setter\r\n     but instead of calling it several times and each time defining\r\n     new functionality, it is like an overloaded function that takes \r\n     different arguments, and acts accordingly.\r\n\r\n     dispatch is aware of the state, and acts as a setter, so when\r\n     you are returning ( like below ), either a new array with a new\r\n     object, a newState, or a filtered array - this gets set to state\r\n     because dispatch is the \"setter\"  like in useState\r\n\r\n   dispatch(){\r\n      taskReducer()\r\n   }\r\n*/\r\nexport const taskReducer = (state, action) => {\r\n\r\n   //console.log(\"STATE IN TASKREDUCER: \", state);\r\n   //console.log(\"ACTION IN TASKREDUCER:\", action);\r\n\r\n   switch(action.type) {\r\n\r\n      /* A new object is created with the payload\r\n         set by state in TodoForm.js  */\r\n      case ADD_TODO :\r\n         const newTask = {\r\n            task: action.payload,\r\n            id: Date.now(),\r\n            completed: false\r\n         }\r\n         // Previous state is returned with\r\n         // the new object added\r\n         return [...state, newTask]\r\n         \r\n\r\n      /* State is mapped through the matched id is\r\n         toggled -  */\r\n      case TOGGLE_TODO :\r\n         const newState = state.map( (task)=>{ \r\n            \r\n            if(action.payload === task.id){\r\n               return { ...task, completed: !task.completed};\r\n            }else{\r\n               return task;\r\n            }\r\n         })\r\n         return newState;\r\n         \r\n      \r\n      case CLEAR_COMPLETED :\r\n         return state.filter( item => !item.completed);\r\n\r\n\r\n      default:\r\n         console.log(\"error\");\r\n         return state;\r\n   }\r\n}","import React, { useState, useReducer } from 'react';\nimport ReactDOM from \"react-dom\";\nimport './components/Todo.css'\nimport TodoForm from './components/TodoForm'\nimport TodoList from './components/TodoList'\nimport styled from 'styled-components';\n\nimport { initialState, taskReducer } from './reducers/index' \n\n\nfunction App() {\n                           // USEREDUCER \n  const [ list, dispatch] = useReducer(taskReducer, initialState );\n  \n\n//   const toggleTask = ( todoId ) => {\n//       dispatch({\n//          type: \"TOGGLE_TODO\",\n//          payload: todoId\n//       })\n//   };\n\n   // const clearCompleted = e => {\n   //    e.preventDefault();\n   //    dispatch( {type: \"CLEAR_TODO\"});\n   // };\n\n    return (\n      <MainContainer>\n\n         <div className=\"header\">\n           <h1>To Do List</h1>\n           <TodoForm dispatch={dispatch} />\n         </div>\n\n         <TodoList\n           list={list} //passing state as props\n           //toggleTask={toggleTask} // drilling down functions\n           //clearCompleted={clearCompleted}\n           dispatch={dispatch}\n         />\n\n      </MainContainer>\n    );\n}\n\nexport default App;\n\nconst MainContainer = styled.div`\n   border: 3px solid #009B77;\n   width: 50%;\n   padding: .5em;\n   box-shadow: 0px 0px 20px #060606;\n\n   h1{\n      text-align: center;\n      color: #009B77;\n      font-weight: 900;\n      font-size: 2.5rem;\n   }\n`;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}